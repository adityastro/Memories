{"ast":null,"code":"import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, START_LOADING, END_LOADING, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\nimport * as api from '../api/index.js'; //Action Creators\n//actions are functions which have type and payload\n// we use redux thunck as we are dealing with asynchronous \n// logic we add async dispatch function in front and\n// then dispatch the actin\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    }); // dispatch({ type: END_LOADING });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = (post, history) => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n    history.push(`/posts/${data._id}`);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  try {\n    const {\n      data\n    } = await api.likePost(id, user === null || user === void 0 ? void 0 : user.token);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id); // dispatch({ type: COMMENT, payload: data });\n    // return data.comments;\n\n    log;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","START_LOADING","END_LOADING","CREATE","UPDATE","DELETE","LIKE","api","getPost","id","dispatch","type","data","fetchPost","payload","error","console","log","getPosts","page","fetchPosts","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","history","push","_id","updatePost","likePost","user","JSON","parse","localStorage","getItem","token","commentPost","value","comment","deletePost"],"sources":["C:/Users/adity/OneDrive/Desktop/MEMORIES_PROJECT/client/src/actions/posts.js"],"sourcesContent":["import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, START_LOADING, END_LOADING, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\r\nimport * as api from '../api/index.js';\r\n\r\n//Action Creators\r\n//actions are functions which have type and payload\r\n// we use redux thunck as we are dealing with asynchronous \r\n// logic we add async dispatch function in front and\r\n// then dispatch the actin\r\n\r\nexport const getPost = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n\r\n        const { data } = await api.fetchPost(id);\r\n\r\n        dispatch({ type: FETCH_POST, payload: data });\r\n\r\n        // dispatch({ type: END_LOADING });\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const getPosts = (page) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n\r\n        const { data } = await api.fetchPosts(page);\r\n\r\n        dispatch({ type: FETCH_ALL, payload: data });\r\n\r\n        dispatch({ type: END_LOADING });\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n        const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\r\n\r\n        dispatch({ type: FETCH_BY_SEARCH, payload: data });\r\n        dispatch({ type: END_LOADING });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const createPost = (post, history) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: START_LOADING });\r\n        const { data } = await api.createPost(post);\r\n\r\n        dispatch({ type: CREATE, payload: data });\r\n        history.push(`/posts/${data._id}`);\r\n\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.updatePost(id, post);\r\n\r\n        dispatch({ type: UPDATE, payload: data });\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const likePost = (id) => async (dispatch) => {\r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n    try {\r\n        const { data } = await api.likePost(id, user?.token);\r\n\r\n        dispatch({ type: LIKE, payload: data });\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const commentPost = (value, id) => async (dispatch) => {\r\n    try {\r\n        const { data } = await api.comment(value, id);\r\n\r\n        // dispatch({ type: COMMENT, payload: data });\r\n\r\n        // return data.comments;\r\n        log\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n    try {\r\n        await api.deletePost(id);\r\n\r\n        dispatch({ type: DELETE, payload: id });\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}